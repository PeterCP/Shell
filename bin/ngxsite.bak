#!/usr/bin/ruby

# Variables
$file_ext = '.conf' # File extension used in sites-* directories.
$conf_dir = '/usr/local/etc/nginx' # Path to nginx configuration directory.
$sites_available = "#{$conf_dir}/sites-available" # Path to sites-available.
$sites_enabled = "#{$conf_dir}/sites-enabled" # Path to sites-enabled.

require 'fileutils'

class String
    # Output formatters.
    def bold;         "\e[1m#{self}\e[0m" end
    def underlined;   "\e[4m#{self}\e[0m" end
    def red;          "\e[31m#{self}\e[0m" end
    def green;        "\e[32m#{self}\e[0m" end
    def yellow;       "\e[33m#{self}\e[0m" end
    def cyan;         "\e[36m#{self}\e[0m" end

    # Integer validator.
    def is_i?
        return self =~ /^[0-9]+$/ ? true : false
    end

    # Strip extension.
    def strip_ext
        return File.basename(self, File.extname(self))
    end
end

class Site
    # Get a list of all sites available.
    def self.all
        result = []
        Dir.glob("#{$sites_available}/*#{$file_ext}").each do |site_path|
            result << Site.from_file(site_path)
        end
        return result
    end

    # Return true if a site exists with that name and false otherwise.
    def self.exist?(name)
        self.all.each do |site|
            return true if name == site.name
        end
        return false
    end

    # Create a new site object from its path.
    def self.from_file(path)
        return Site.new({
            path: File.expand_path(path),
            filename: File.basename(path),
            name: path.strip_ext
        })
    end

    # Create a new site object from its name.
    def self.from_name(name)
        basename = "#{name}#{$file_ext}"
        return Site.new({
            path: "#{$sites_available}/#{basename}",
            filename: basename,
            name: name
        })
    end

    attr_reader :path, :filename, :name

    def initialize(hash)
        @path = hash[:path] # Path to the site file.
        @filename = hash[:filename] # Site file basename.
        @name = hash[:name] # Site name w/o extension.
    end

    # Return true if the site is enabled and false otherwise.
    def enabled?
        sa = "#{$sites_available}/#{@filename}"
        se = "#{$sites_enabled}/#{@filename}"
        return File.symlink?(se) && File.readlink(se) == sa
    end

    # Return true if site exists and false otherwise.
    def exist?
        return self.class.exist?(self.name)
    end

    # Return true if the site file is a symbolic link and false otherwise.
    def symlink?
        return File.symlink?("#{$sites_available}/#{@filename}")
    end

    # Return the real path for the site if it is a symbolic link
    # or an empty string otherwise.
    def symlink
        return self.symlink? ?
            File.readlink("#{$sites_available}/#{@filename}") : ''
    end
end

# Show a table with site info.
def site_info_table
    result = []

    # Headers for each column.
    headers = {
        index: '#',
        name: 'Name',
        enabled: 'Status',
        is_link: 'Link',
        links: 'Links',
    }

    # Max length for each column.
    max = {
        index: headers[:index].length,
        name: headers[:name].length,
        enabled: headers[:enabled].length + 2,
        is_link: headers[:is_link].length,
        links: headers[:links].length,
    }

    # Get the info array and update max lengths.
    Site.all.each_with_index do |site, index|
        max[:index] = index.to_s.length if index.to_s.length > max[:index]
        max[:name] = site.name.length if site.name.length > max[:name]
    end

    # Print headers.
    hindex = headers[:index].ljust(max[:index])
    hname = headers[:name].ljust(max[:name])
    henabled = headers[:enabled].ljust(max[:enabled])
    hislink = headers[:is_link]
    result << " #{hindex}   #{hname}   #{henabled}   #{hislink} " \
        # .ljust(`tput cols`.to_i) # Use this for a full width underline.
        .bold.yellow.underlined

    # Print each site.
    Site.all.each_with_index do |site, index|
        index = index.to_s.ljust(max[:index]).bold
        name = site.name.ljust(max[:name]).cyan
        # enabled = '' # This doesn't seem to be needed in Ruby.
        if site.enabled? then
            enabled = 'Enabled'.ljust(max[:enabled]).green
        elsif
            enabled = 'Disabled'.ljust(max[:enabled]).red
        end
        link = site.symlink? ? 'Yes'.green : 'No'.red
        result << " #{index}   #{name}   #{enabled}   #{link}"
    end

    return result * "\n"
end

# Exit with error.
def ngx_error(message, code=1)
    $stderr.puts "ERROR: ".bold.red + message
    exit code
end

# Reload configuration
def ngx_reload
    print 'Reload Nginx configuration? (Y/n) '
    if !['no', 'n', 'false', '0'].include?($stdin.gets.strip.downcase) then
        puts 'Reloading Nginx. You may be prompted for password by sudo.'
        `sudo nginx -s reload`
    end
end

# Select a site and return its path.
def select_site
    puts site_info_table
    sites = Site.all
    index = nil
    loop do
        print 'Input the number of the desired site: '
        begin
            index = $stdin.gets.strip
        rescue Interrupt
            puts
            exit 0
        end
        break if index.is_i? && index.to_i < sites.length
    end
    return sites[index.to_i]
end

# Enable a site.
def enable_site(site)
    ngx_error("Site '#{site.name.bold}' does not exist.") if not site.exist?
    ngx_error("Site '#{site.name.bold}' is already enabled.") if site.enabled?
    sa = "#{$sites_available}/#{site.filename}"
    se = "#{$sites_enabled}/#{site.filename}"
    File.symlink(sa, se)
    puts "Site '#{site.name.bold}' enabled."
end

# Disable a site.
def disable_site(site)
    ngx_error("Site '#{site.name.bold}' does not exist.") if not site.exist?
    ngx_error("Site '#{site.name.bold}' is not enabled.") if not site.enabled?
    File.delete("#{$sites_enabled}/#{site.filename}")
    puts "Site '#{site.name.bold}' disabled."
end

# Install a site to sites-enabled.
def add_site(path)
    if path == nil then
        ngx_error 'Specify a file to install.'
    end
    print "Name the site: [#{path.strip_ext}] "
    name = $stdin.gets.strip
    name = name == '' ? path.strip_ext : name
    ngx_error "Site '#{name}' already exists." if Site.exist?(name)
    original_path = File.expand_path(path)
    install_path = "#{$sites_available}/#{name}#{$file_ext}"
    print "Symbolic link (YES) or hard copy (no)? "
    link = !['no', 'n', 'false', '0'].include?($stdin.gets.strip.downcase)
    if link then
        File.symlink(original_path, install_path)
        puts "Site '#{name.bold}' added as symlink."
    else
        FileUtils.cp(original_path, install_path)
        puts "Site '#{name.bold}' added as hard copy."
    end
end

# Remove a site from sites-available if it is not enabled.
def remove_site(site)
    ngx_error("Site '#{site.name.bold}' does not exist.") if not site.exist?
    ngx_error("Site '#{site.name.bold}' is enabled. Disable it first.") if site.enabled?
    File.delete(site.path)
    puts "Site '#{site.name.bold}' removed."
end

# Get the path of the selected site.
def site_path(site)
    ngx_error("Site '#{site.name.bold}' does not exist.") if not site.exist?
    puts site.path
end

def usage
    return [
        "Usage: #{File.basename($0).bold} <command> [args] - Manage Nginx sites.",
        "Commands:",
        "    <enable>   [site]  Enable a site.",
        "    <disable>  [site]  Disable a site.",
        "    <add>      [site]  Add a new site.",
        "    <remove>   [site]  Remove a site.",
        "    <path>     [site]  Print a site's path.",
        # "    <create>   [site]  Create a new site. - Not implemented.",
        # "    <info>     [site]  Get site info. - Not implemented.",
        "    <list>             List all sites.",
        "    <help>             Display this message."
    ] * "\n"
end

def main
    command, *args = ARGV
    case command
    when 'enable', 'e'
        enable_site(args[0] != nil ? Site.from_name(args[0]) : select_site)
        ngx_reload
    when 'disable', 'd'
        disable_site(args[0] != nil ? Site.from_name(args[0]) : select_site)
        ngx_reload
    when 'add', 'a'
        add_site(args[0])
    when 'remove', 'r'
        remove_site(args[0] != nil ? Site.from_name(args[0]) : select_site)
    when 'path', 'p'
        site_path(args[0] != nil ? Site.from_name(args[0]) : select_site)
    when 'list', 'l'
        puts site_info_table
    else
        puts usage
    end
end

# Run main
main
